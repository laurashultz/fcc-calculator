{"version":3,"sources":["index.js","buttons.js"],"names":["myBtns","buttons","data","Calculator","props","state","mem","current","cutoff","calc","lastClick","onClick","bind","doMath","handleNum","handleDec","handleOp","handleExecute","event","val","target","value","type","dataset","this","length","num1","num2","opper","x","substring","setState","String","indexOf","result","Number","parseFloat","chop","slice","id","class","data-type","React","Component","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.94f7eaca.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport buttons from './buttons.js';\n\nvar myBtns = buttons.data;\n\nclass Calculator extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = ({\n      mem: '',\n      current: '0',\n      cutoff: '',\n      calc: [0,''],\n      lastClick: ''\n    });\n    this.onClick = this.onClick.bind(this);\n    this.doMath = this.doMath.bind(this);\n    this.handleNum = this.handleNum.bind(this);\n    this.handleDec = this.handleDec.bind(this);\n    this.handleOp = this.handleOp.bind(this);\n    this.handleExecute = this.handleExecute.bind(this);\n  }\n  /* this section will be updated to handle key presses for accessibility but has not yet been implemented\ncomponentDidMount() {\n    document.addEventListener('keypress', this.onKeyPress);\n  }\ncomponentWillUnmount() {\n    document.removeEventListener('keypress', this.onKeyPress);\n  }\n onKeyPress(event){\n } */\n/*the onClick method handles any button click*/\n onClick(event){\nlet val = event.target.value;\nlet type = event.target.dataset.type;\nlet mem; \nif (this.state.mem.length === 0){ //just for checking whether there is a nonzero string in mem or not because several methods check this\nmem = false;  \n} else{\nmem = true;\n}\n/*this switch statement checks the 'type' property of the object corresponding to the button \nthat was clicked, and calls the appropriate method to handle updating the state */\nswitch(type){\n  case \"num\":\n     this.handleNum(val,mem);\n     break;\n  case \"operator\":\n     this.handleOp(val,mem);\n     break;     \n  case \"decimal\":\n     this.handleDec();\n     break;\n  case \"executor\":\n     this.handleExecute(val,mem);\n     break;\n  default:\n     break;\n\n}\n}\n/*simple method for completing the actual math. Pass it two numbers and the operator, and it will return the calculated result */\ndoMath(num1,num2,opper) {\n        switch(opper){\n          case '+':\n            return num1+num2;\n          case '-':\n            return num1-num2;\n          case '/':\n            return num1/num2;\n          case '*':\n            return num1*num2;\n          default:\n            return 1;\n\n        }\n}\n/*the handleNum method handles whenever a number is clicked*/\nhandleNum(val){\nlet x = this.state.cutoff;\nif(this.state.cutoff.length > 14){\n  x = x.substring(1,);\n} else{\n  x = this.state.cutoff;\n}\nif(this.state.current !== '0'){\nthis.setState({\n  current: this.state.current + String(val),\n  cutoff: x + String(val),\n  lastClick: \"num\"\n});\n} else{\n  this.setState({\n    current: String(val),\n    cutoff: String(val),\n    lastClick: \"num\"\n  });\n}\n\n}\n\n/*the handleDec method handles whenever the decimal is clicked*/\nhandleDec(){\nif(this.state.current.indexOf(\".\")>=0){\n  return;\n} else if(this.state.current === '0'){\n  this.setState({\n    current: '0.',\n    cutoff: '0.'\n  });\n} else {\n  this.setState({\n    current: this.state.current + '.',\n    cutoff: this.state.cutoff + '.',\n    lastClick: \"decimal\"\n  });\n}\n}\n\n/*the handleOp method handles whenever an operator is clicked */\nhandleOp(val,mem){\nif(mem && (this.state.lastClick === 'operator')){  /*Check if there is something in memory AND the last click was an operator */\n    if(val==='-' && (this.state.current !== '-')){ /*check if the current click is minus AND the current display is not \"-\" */\n      this.setState({    /*we have the situation where there was an operator clicked previously, and now we are hitting the minus sign, so the person wants a negative number, set display to \"-\" */\n        current: '-',\n        cutoff: '-'\n      });\n    }else if(val === '-' && (this.state.current ==='-')){ /*if we clicked the minus sign multiple times, you will have a negative num and the operator will be negative, no change for duplicate hit of the button */\n      return;\n    } else {     /*this else statement captures: if there is something in memory, last click was an operator, and it was not the '-' button */\n      if(this.state.current === '-'){     /*check if we switched to another operator from selecting minus on the prior click*/\n\n        this.setState({            /*if someone clicks, for example '5 * - +', it will get rid of the negative sign that was added when the user clicked '-' on the prior button click*/\n          calc: [this.state.calc[0],val],\n          lastClick: 'operator',\n          current: '',\n          cutoff: ''\n        });\n      }\n    }\n} else if(mem && (this.state.lastClick !== 'operator')) {\n  let result = this.doMath(this.state.calc[0],Number.parseFloat(this.state.current),this.state.calc[1]);\n  this.setState({\n    mem: String(result),\n    current: '',\n    calc: [result,val],\n    lastClick: 'operator'\n  })\n} else{\n  this.setState({\n    mem: this.state.current,\n    current: '',\n    cutoff: '',\n    calc: [Number.parseFloat(this.state.current),val],\n    lastClick: 'operator'\n  });\n}\n\n\n}\n/*the handleExecute method will handle execution of 'clear' or 'equals' calculator function*/\nhandleExecute(val,mem){\nif(val===\"clear\"){ /*check if the target of the click was \"clear\"*/\n  this.setState({  /*if it was 'clear', set back to original state*/\n    mem: '',\n    current: '0',\n    cutoff: '',\n    calc: [0,''],\n    lastClick: ''\n  });\n} else if (val===\"=\") { /* if the equals button was pressed*/\n    if(mem){\n    let result = this.doMath(this.state.calc[0],parseFloat(this.state.current),this.state.calc[1]); /*run the doMath method to calculate */\n    let chop;\n    if (result.length > 13){  /*check the length of the result to ensure the display doesn't become huge due to long parsed floats [or just huge user-input numbers] */\n      chop = result.slice(result.length-14,result.length-1);\n    } else{\n      chop = result;\n    }\n    this.setState({\n      mem: '',\n      current: result,\n      cutoff: chop,\n      calc: [1,'='],\n      lastClick: 'executor'\n    });\n    }\n}\n\n}\n render() {\n  return(\n  <div id=\"calcbox\">\n        <div class=\"disp mem-disp\" id=\"memory\">{this.state.mem}{this.state.calc[1]}</div>\n\n        <div class=\"disp main-disp\" id=\"display\">\n          {this.state.current.length > 14\n            ? this.state.cutoff\n            : this.state.current}\n      </div>\n      \n<div class=\"btnBox\">\n          <div class=\"numeric\">\n            <div class=\"rows\">\n          <button class=\"button button-num\" id={myBtns[0].id} data-type={myBtns[0].type} value={myBtns[0].value} onClick= {this.onClick}>0</button>\n          <button class=\"button\" id={myBtns[15].id} data-type={myBtns[15].type} value={myBtns[15].value} onClick={this.onClick}>.</button>\n            </div>\n            <div class=\"rows\">\n          <button class=\"button button-num\" id={myBtns[1].id} data-type={myBtns[1].type} value={myBtns[1].value} onClick= {this.onClick}>1</button>\n          <button class=\"button button-num\" id={myBtns[2].id} data-type={myBtns[2].type} value={myBtns[2].value} onClick= {this.onClick}>2</button>\n          <button class=\"button button-num\" id={myBtns[3].id} data-type={myBtns[3].type} value={myBtns[3].value} onClick= {this.onClick}>3</button>\n            </div>\n            <div class=\"rows\">\n          <button class=\"button button-num\" id={myBtns[4].id} data-type={myBtns[4].type} value={myBtns[4].value} onClick= {this.onClick}>4</button>\n          <button class=\"button button-num\" id={myBtns[5].id} data-type={myBtns[5].type} value={myBtns[5].value} onClick= {this.onClick}>5</button>\n          <button class=\"button button-num\" id={myBtns[6].id} data-type={myBtns[6].type} value={myBtns[6].value} onClick= {this.onClick}>6</button>\n            </div>\n            <div class=\"rows\">\n          <button class=\"button button-num\" id={myBtns[7].id} data-type={myBtns[7].type} value={myBtns[7].value} onClick= {this.onClick}>7</button>\n          <button class=\"button button-num\" id={myBtns[8].id} data-type={myBtns[8].type} value={myBtns[8].value} onClick= {this.onClick}>8</button>\n          <button class=\"button button-num\" id={myBtns[9].id} data-type={myBtns[9].type} value={myBtns[9].value} onClick= {this.onClick}>9</button>\n            </div>\n            <div class=\"rows\">\n          <button class=\"button button-num\" id={myBtns[16].id} data-type={myBtns[16].type} value={myBtns[16].value} onClick= {this.onClick}>c</button>\n          <button class=\"button button-num\" id={myBtns[13].id} data-type={myBtns[13].type} value={myBtns[13].value} onClick= {this.onClick}>/</button>\n          <button class=\"button button-num\" id={myBtns[12].id} data-type={myBtns[12].type} value={myBtns[12].value} onClick= {this.onClick}>x</button>\n            </div>\n           </div>\n        <div class=\"operators\">\n          <button class=\"button\" id={myBtns[11].id} data-type={myBtns[11].type} value={myBtns[11].value} onClick= {this.onClick}>-</button>\n          <button class=\"button\" id={myBtns[10].id} data-type={myBtns[10].type} value={myBtns[10].value} onClick= {this.onClick}>+</button>\n          <button class=\"button\" id={myBtns[14].id} data-type={myBtns[14].type} value={myBtns[14].value} onClick= {this.onClick}>=</button>\n          \n          </div> \n      </div>\n      \n  </div>\n    \n    \n    \n    \n  )};\n}\n\nReactDOM.render(<Calculator />, document.getElementById('root'));\n\n","const buttons= [{id: \"zero\", value: 0, type: \"num\"},\n              {id: \"one\", value: 1, type: \"num\"},\n              {id: \"two\", value: 2, type: \"num\"},\n              {id: \"three\", value: 3, type: \"num\"},\n              {id: \"four\", value: 4, type: \"num\"},\n              {id: \"five\", value: 5, type: \"num\"},\n              {id: \"six\", value: 6, type: \"num\"},\n              {id: \"seven\", value: 7, type: \"num\"},\n              {id: \"eight\", value: 8, type: \"num\"},\n              {id: \"nine\", value: 9, type: \"num\"},\n              {id: \"add\", value: \"+\", type: \"operator\"},\n              {id: \"subtract\", value: \"-\", type: \"operator\"},\n              {id: \"multiply\", value: \"*\", type: \"operator\"},\n              {id: \"divide\", value: \"/\", type: \"operator\"},\n              {id: \"equals\", value: \"=\", type: \"executor\"},\n              {id: \"decimal\", value: \".\", type: \"decimal\"},\n              {id: \"clear\", value: \"clear\", type: \"executor\"},\n];\n\nmodule.exports = {data: buttons}\n"],"sourceRoot":""}